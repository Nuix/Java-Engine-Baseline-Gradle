/*
 * This file was handcrafted for Nuix specificiations running intelliJ
 * Eclipse and other IDE to be done at a later time
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'

    // In order to support run configurations
    id "org.jetbrains.gradle.plugin.idea-ext" version "0.8.1"

}

repositories {
    jcenter()

    flatDir {
        dirs 'engine/lib'
    }
}



dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:29.0-jre'

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'

    // Useful for logging requirements
    implementation( 'org.apache.logging.log4j:log4j-api:2.8.2')
    implementation( 'org.apache.logging.log4j:log4j-core:2.8.2')

    //useful for parsing CLI paramaters
    implementation ("info.picocli:picocli:4.5.1")

    //May generate long command line warnings.. but wait and the IDE will shorten it.
    implementation fileTree(dir: 'engine/lib', include: 'nuix-scripting*.jar')
    implementation fileTree(dir: 'engine/lib', include: 'nuix-engine*.jar')
    runtimeOnly fileTree(dir: 'engine/lib', include: '*.jar')

    annotationProcessor 'info.picocli:picocli-codegen:4.5.1'
}

applicationDefaultJvmArgs=['-Dnuix.libdir="' + System.getProperty("user.dir") + '\\engine\\lib"',
                           '-Dnuix.logdir="' + System.getProperty("user.dir") + '\\logs"',
                           '-Dnuix.userDataDirs="' + System.getProperty("user.dir") + '\\engine\\user-data"']

import org.jetbrains.gradle.ext.*


task checkEnvironment {
    doLast() {
        //Enforce a java version of 1.8
        def actualJava = System.getProperty('java.version')
        if (!actualJava.startsWith("1.8")) {
            //throw new GradleException("Running the build with Java ${actualJava}, expected 1.8")
            System.out.println("Running the build with Java ${actualJava}, expected 1.8")
        }
    }
}

task checkSwitches {
    def jvmArgs = applicationDefaultJvmArgs
    def expectedSwitches = ["-Dnuix.libdir=","-Dnuix.logdir=","-Dnuix.userDataDirs="]
    for (expectedSwitch in expectedSwitches) {
        def switchFound=false
        for (jvmArg in jvmArgs) {
            if(jvmArg.startsWith(expectedSwitch))
            {
                //should check if the switch is a folder that could be created or does exist
                switchFound=true
            }
        }
        if(!switchFound)
        {
            throw new GradleException("Expected switch was not found:" + expectedSwitch)
        }
    }
}
allprojects {
    tasks.withType(JavaCompile).configureEach {
        dependsOn checkSwitches
        dependsOn checkEnvironment
    }
}

application {
    // Define the main class for the application.
    mainClassName = 'Nuix.Baseline.App'
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}

/*
 * Run configurations are documented here: https://github.com/JetBrains/gradle-idea-ext-plugin/wiki/DSL-spec-v.-0.1
 */
idea
        {
            project
                    {
                        settings {
                            runConfigurations {
                                "Nuix Baseline.App"(Application)
                                        {
                                            mainClass = getProject().idea.module.name.replaceAll(" ", ".") + '.App'
                                            moduleName = getProject().idea.module.name.replaceAll(" ", "_") + '.main'
                                            / *
                                              * java specific like -xms should be specified here
                                              * as well as the Nuix container requirements
                                              */
                                            programParameters = '-h ' +
                                                                '-d="' + System.getProperty("user.dir") + '\\engine\\user-data"';
                                            envs = new HashMap<String, String>() {
                                                {
                                                    // Prevent any potential conflicts with REST on the same box
                                                    // Also prevent any potential existing issues with PATH
                                                    put("PATH", System.getProperty("user.dir") + '\\engine\\lib;' + System.getProperty("user.dir") + '\\engine\\bin')
                                                }
                                            }
                                            jvmArgs=applicationDefaultJvmArgs.join(" ")
                                        }
                                "Nuix Baseline Tests.App"(Gradle)
                                        {
                                            scriptParameters='--tests "AppTest.*"'
                                            taskNames=[":test"]
                                            projectPath=System.getProperty("user.dir")
                                            envs = new HashMap<String, String>() {
                                                {
                                                    // Prevent any potential conflicts with REST on the same box
                                                    // Also prevent any potential existing issues with PATH
                                                    put("PATH", System.getProperty("user.dir") + '\\engine\\lib;' + System.getProperty("user.dir") + '\\engine\\bin')
                                                    // Example if required
                                                    // put("JAVA_HOME", 'C:\\GitHub\\Java-Engine-Baseline-Gradle\\jdk1.8.0_261')
                                                }
                                            }
                                            jvmArgs=applicationDefaultJvmArgs.join(" ")
                                        }
                            }
                            copyright {}
                            // other project level settings
                        }
                    }
        }
